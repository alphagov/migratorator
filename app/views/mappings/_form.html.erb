<div class="row">
  <div class="span7">
    <%= form_for @mapping, :html => { :class => "well" } do |f| %>

      <% if @mapping.errors.any? %>
        <% @mapping.errors.full_messages.each do |message| %>
          <div class="alert alert-error"><%= message %></div>
        <% end %>
      <% end %>

      <p>
        <%= f.label :title %>
        <%= f.text_field :title, :class => 'span6' %>
      </p>

      <p>
        <%= f.label :old_url, "Old URL" %>
        <%= f.text_field :old_url, :class => 'span6' %>
      </p>

      <p>
        <%= f.label :new_url, "New URL" %>
        <%= f.text_field :new_url, :class => 'span6' %>
      </p>

      <p>
        <%= f.label :reviewed, "Reviewed" %>
        <%= f.check_box :reviewed, { }, "true", "" %>
      </p>

      <p>
        <%= f.label :status %>
        <%= f.select :status, [ ["301 - Redirect to new url", 301], ["410 - Show a gone page", 410] ], :include_blank => "Not yet decided" %>
      </p>

      <p>
        <%= f.label :tags_list, "Tags" %>
        <%= f.text_field :tags_list, :class => 'span6 tags_autocomplete' %>
      </p>

      <p>
        <%= f.label :notes %>
        <%= f.text_area :notes, :rows => 4, :class => "span6" %>
      </p>

      <p>
        <%= f.submit ( @mapping.persisted? ? "Update Mapping" : "Create Mapping"), :class => 'btn btn-primary' %> &nbsp; or &nbsp;
        <%= link_to "Cancel", filter_mappings_path(referer_session), :class => 'btn' %>
      </p>
    <% end %>
  </div>
  <div class="span5 history">
    <h2>Mapping Changes</h2>
    <ul>
      <%= render :partial => 'history_track', :collection => @mapping.history_tracks %>
    </ul>
  </div>
</div>

<script type="text/javascript">
  var tags_input_box = $('input.tags_autocomplete');
  var tags_dropdown_box = $('<select class="tags_autocomplete_select span6" multiple></select>');

  tags_input_box.hide();
  tags_dropdown_box.insertAfter(tags_input_box);

  $.getJSON('<%= api_tags_path(:format => :json, :exclude => true, :order => 'groups') %>', function(data) {
    var groups = { };

    $.each(data.tags, function(key,tag) {
      tag = tag.tag;

      if (tag.group == null) { tag.group = "other"; }
      if (groups[tag.group] === undefined) { groups[tag.group] = []; }
      groups[tag.group].push(tag);
    });

    $.each(groups, function(group, tags) {
      group_html = '<optgroup label="'+ group +'">';
      for (x in tags) {
        tag = tags[x];
        group_html += '<option value="'+ tag.whole_tag +'">'+ tag.whole_tag +'</option>';
      }

      group_html += '</optgroup>';
      tags_dropdown_box.append(group_html);
    });

    if (tags_input_box.val()) {
      tags_dropdown_box.val( tags_input_box.val().split(', ') );
    }
    tags_dropdown_box.chosen();

    // do not allow more than one tag with the same prefix to be selected
    tags_dropdown_box.change( function() {
      var duplicate_tags = [];
      $(tags_dropdown_box).closest('p').siblings('div.duplicate-tag-error').remove();

      var tags_array = $(this).val();
      $(tags_array).each(function(i, tag) {
        if (tag.split(':').length > 1) {

          var tag_group = tag.split(":")[0];

          var matching_selected_tags = tags_array.filter( function(element, index, array){
            return ( element.match(new RegExp('^'+tag_group)) !== null );
          });

          if (matching_selected_tags.length > 1 && $.inArray(tag_group, duplicate_tags) == -1) {
            duplicate_tags.push(tag_group);
          }
        }
      });

      if (duplicate_tags.length > 0) {
        $('<div class="alert alert-error duplicate-tag-error">Please only select one tag from each group. (You have more than one tag for <strong>'+ duplicate_tags.join(', ') +'</strong>)</div>').insertBefore( $(tags_dropdown_box).closest('p') );
      }
    });
    tags_dropdown_box.change();
  });

  $('form').submit( function(){
    tags_input_box.val( tags_dropdown_box.val().join(', ') );
    tags_dropdown_box.attr('disabled','disabled');
  });


</script>